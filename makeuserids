#!/bin/bash
# Script to create unique userids from a list of user names
# CS 370, Fall 2012
# important not to break up order of ids. Since order of identies have to be the
# same. 

# 0. Remove any temporary files from previous runs of the script.
#    This is essential during script testing.

echo "0. Deleting temporary files..."
rm firstn
rm lastname
rm ids.1st 
rm duplids
rm ids.2nd
rm ids.final

# 1. Create firstn from $inputfile
echo "1. Creating first name..."
inputfile=$1

cut -d, -f2 $inputfile | cut -c2 | tr A-Z a-z > firstn


# 2. Create lastn from $inputfile with all special characters removed

echo "2. Removing special characters and creating last name..."
cut -d, -f1 $inputfile | tr -d [:punct:] |tr -d " " | cut -c1-7 | tr A-Z a-z > lastname  

# 3. Create first draft userids file from firstn and lastn > ids.1st'.
#    It contains userids in this format:
#
#     jabraham
#     tabraham
#     jabraham
#     jabrams
#     dabrams
#     jabrams
#
# We want to keep the ids.1st file in the same order as $inpufile
# since we want to be able to paste the ids file and $inputfile
# together at some point, like this (after duplicate ids have been
# dealt with):
#
#     Abraham, Jesse :jabraha1
#     Abrahamsen, Theresa :tabraham
#     Abrahamson, Jonathan :jabraha2
#     Abrams, Jenelle :jabrams1
#     Abrams, Dana :dabrams
#     Abrams, Jessica :jabrams2

echo "3. Creating first draft of userids file > ids.1st"
paste -d " " firstn lastname | tr -d " " > ids.1st



# 4. Create list of the duplicated ids in ids.1st > duplids'.
#    We'll use duplids as a lookup table.  A portion of duplids is
#    shown below:
#
#     jabraham
#     tabraham
#     jabrams
#     dabrams

echo "4. Creating list of duplicated ids in ids.1st > duplids"
sort ids.1st | uniq -d > duplids


# 5. Append userids from ids.1st to ids.2nd.
#    If a userid is duplicated, attach appropriate numbers to them
#    and append to ids.2nd.
#
#    Here, grep is your friend. But, be sure to do WHOLE WORD grep. 
#
#    For each userid in ids.1st,
#       grep for the userid in duplids from Step 4.
#
#       If grep didn't find the userid in duplids, it's unique, so
#           just append it straightaway to ids.2nd
#
#       Else, (if grep did find the userid in duplids)
#           attach a number to the userid starting at number=1, making
#           sure the userid remains no more than 8 chars.
#
#           grep for the numbered userid in ids.2nd.
#
#           If grep finds that the numbered userid is already in
#           ids.2nd, increment the number by 1, and grep for the new
#           numbered userid in ids.2nd.  REPEAT until grep does not
#           find the numbered userid in ids.2nd.
#
#           Append the numbered userid to ids.2nd.
#
#
# After this, ids.2nd will look like this (the original order of
# ids.1st is preserved):
#
#     jabraha1
#     tabraham
#     jabraha2
#     jabrams1
#     dabrams
#     jabrams2
echo "5. Finding and appending numbers to duplicates in ids.1st > ids.2nd"

touch ids.2nd

for userId in $(cat ids.1st)
do
	grep -w -q $userId duplids
	if [ $? -ne 0 ]
	then echo $userId >> ids.2nd
	else
		number=1
		inc=1
		userId2=$(echo $userId | cut -c 1-7)
		grep -w -q $userId2$number ids.2nd
		while [ $? -eq 0 ]
		do
			number=$(($number + $inc))
			grep -w -q $userId2$number ids.2nd
		done

		echo $userId2$number >> ids.2nd
	fi
done


rm duplids

# 6. Double check ids.2nd for any userid duplications.
#    The same uniq option used to create duplids (step 4) should
#    work.
echo "6. Double checking for duplicates..."
sort ids.2nd | uniq -d > duplids


if [ -s duplids ]
then
	echo "--Duplicates found--"
else
	echo "--No userid duplications found--"
fi

# 7. Paste ids.2nd to $inputfile > ids.final

echo "7. Pasting ids.2nd to original input file > ids.final"
paste ids.2nd $inputfile > ids.final


